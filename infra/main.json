{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.177.2456",
      "templateHash": "11255939562771631710"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 64,
      "metadata": {
        "description": "Name of the the environment which is used to generate a short unique hash used in all resources."
      }
    },
    "location": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Primary location for all resources"
      }
    },
    "principalId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Id of the user or app to assign application roles"
      }
    },
    "resourceToken": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "A token to inject into the name of each resource."
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "analysisServicesServers": "as",
      "apiManagementService": "apim-",
      "appConfigurationConfigurationStores": "appcs-",
      "appManagedEnvironments": "cae-",
      "appContainerApps": "ca-",
      "authorizationPolicyDefinitions": "policy-",
      "automationAutomationAccounts": "aa-",
      "blueprintBlueprints": "bp-",
      "blueprintBlueprintsArtifacts": "bpa-",
      "cacheRedis": "redis-",
      "cdnProfiles": "cdnp-",
      "cdnProfilesEndpoints": "cdne-",
      "cognitiveServicesAccounts": "cog-",
      "cognitiveServicesFormRecognizer": "cog-fr-",
      "cognitiveServicesTextAnalytics": "cog-ta-",
      "computeAvailabilitySets": "avail-",
      "computeCloudServices": "cld-",
      "computeDiskEncryptionSets": "des-",
      "computeDisks": "disk-",
      "computeDisksOs": "osdisk-",
      "computeGalleries": "gal-",
      "computeSnapshots": "snap-",
      "computeVirtualMachines": "vm-",
      "computeVirtualMachineScaleSets": "vmss-",
      "containerInstanceContainerGroups": "ci-",
      "containerRegistryRegistries": "cr",
      "containerServiceManagedClusters": "aks-",
      "databricksWorkspaces": "dbw-",
      "dataFactoryFactories": "adf-",
      "dataLakeAnalyticsAccounts": "dla-",
      "dataLakeStoreAccounts": "dls-",
      "dataMigrationServices": "dms-",
      "dBforMySQLServers": "mysql-",
      "dBforPostgreSQLServers": "psql-",
      "devicesIotHubs": "iot-",
      "devicesProvisioningServices": "provs-",
      "devicesProvisioningServicesCertificates": "pcert-",
      "documentDBDatabaseAccounts": "cosmos-",
      "eventGridDomains": "evgd-",
      "eventGridDomainsTopic": "evgt-",
      "eventGridEventSubscriptions": "evgs-",
      "eventHubNamespaces": "evhns-",
      "eventHubNamespacesEventHubs": "evh-",
      "hdInsightClustersHadoop": "hadoop-",
      "hdInsightClustersHbase": "hbase-",
      "hdInsightClustersKafka": "kafka-",
      "hdInsightClustersMl": "mls-",
      "hdInsightClustersSpark": "spark-",
      "hdInsightClustersStorm": "storm-",
      "hybridComputeMachines": "arcs-",
      "insightsActionGroups": "ag-",
      "insightsComponents": "appi-",
      "keyVaultVaults": "kv-",
      "kubernetesConnectedClusters": "arck-",
      "kustoClusters": "dec-",
      "kustoClustersDatabases": "dedb-",
      "loadTesting": "lt-",
      "logicIntegrationAccounts": "ia-",
      "logicWorkflows": "logic-",
      "machineLearningServicesModelManagement": "mlmm-",
      "machineLearningServicesWorkspaces": "mlw-",
      "managedIdentityUserAssignedIdentities": "id-",
      "managementManagementGroups": "mg-",
      "mapsAccounts": "map-",
      "mariaDBServers": "maria-",
      "mediaMediaservices": "ams-",
      "migrateAssessmentProjects": "migr-",
      "networkApplicationGateways": "agw-",
      "networkApplicationSecurityGroups": "asg-",
      "networkAzureFirewalls": "afw-",
      "networkBastionHosts": "bas-",
      "networkConnections": "con-",
      "networkDnsZones": "dnsz-",
      "networkExpressRouteCircuits": "erc-",
      "networkFirewallPolicies": "afwp-",
      "networkFirewallPoliciesWebApplication": "waf-",
      "networkFirewallPoliciesRuleGroups": "wafrg-",
      "networkFrontDoors": "fd-",
      "networkFrontdoorWebApplicationFirewallPolicies": "fdfp-",
      "networkLoadBalancersExternal": "lbe-",
      "networkLoadBalancersInternal": "lbi-",
      "networkLoadBalancersInboundNatRules": "rule-",
      "networkLocalNetworkGateways": "lgw-",
      "networkNatGateways": "ng-",
      "networkNetworkInterfaces": "nic-",
      "networkNetworkSecurityGroups": "nsg-",
      "networkNetworkSecurityGroupsSecurityRules": "nsgsr-",
      "networkNetworkWatchers": "nw-",
      "networkPrivateDnsZones": "pdnsz-",
      "networkPrivateLinkServices": "pl-",
      "networkPublicIPAddresses": "pip-",
      "networkPublicIPPrefixes": "ippre-",
      "networkRouteFilters": "rf-",
      "networkRouteTables": "rt-",
      "networkRouteTablesRoutes": "udr-",
      "networkTrafficManagerProfiles": "traf-",
      "networkVirtualNetworkGateways": "vgw-",
      "networkVirtualNetworks": "vnet-",
      "networkVirtualNetworksSubnets": "snet-",
      "networkVirtualNetworksVirtualNetworkPeerings": "peer-",
      "networkVirtualWans": "vwan-",
      "networkVpnGateways": "vpng-",
      "networkVpnGatewaysVpnConnections": "vcn-",
      "networkVpnGatewaysVpnSites": "vst-",
      "notificationHubsNamespaces": "ntfns-",
      "notificationHubsNamespacesNotificationHubs": "ntf-",
      "operationalInsightsWorkspaces": "log-",
      "portalDashboards": "dash-",
      "powerBIDedicatedCapacities": "pbi-",
      "purviewAccounts": "pview-",
      "recoveryServicesVaults": "rsv-",
      "recoveryServicesVaultsBackupPolicies": "bkpol-",
      "redisEnterpriseRedisEnterprise": "redisenterprise-",
      "resourcesResourceGroups": "rg-",
      "searchSearchServices": "srch-",
      "serviceBusNamespaces": "sb-",
      "serviceBusNamespacesQueues": "sbq-",
      "serviceBusNamespacesTopics": "sbt-",
      "serviceEndPointPolicies": "se-",
      "serviceFabricClusters": "sf-",
      "signalRServiceSignalR": "sigr-",
      "sqlManagedInstances": "sqlmi-",
      "sqlServers": "sql-",
      "sqlServersDataWarehouse": "sqldw-",
      "sqlServersDatabases": "sqldb-",
      "sqlServersDatabasesStretch": "sqlstrdb-",
      "storageStorageAccounts": "st",
      "storageStorageAccountsVm": "stvm",
      "storSimpleManagers": "ssimp-",
      "streamAnalyticsCluster": "asa-",
      "synapseWorkspaces": "syn-",
      "synapseWorkspacesAnalyticsWorkspaces": "synw-",
      "synapseWorkspacesSqlPoolsDedicated": "syndp-",
      "synapseWorkspacesSqlPoolsSpark": "synsp-",
      "timeSeriesInsightsEnvironments": "tsi-",
      "webServerFarms": "plan-",
      "webSitesAppService": "app-",
      "webSitesAppServiceEnvironment": "ase-",
      "webSitesFunctions": "func-",
      "webStaticSites": "stapp-"
    },
    "abbrs": "[variables('$fxv#0')]",
    "resourceToken_": "[if(not(empty(parameters('resourceToken'))), parameters('resourceToken'), toLower(uniqueString(subscription().id, parameters('environmentName'), parameters('location'))))]",
    "tags": {
      "azd-env-name": "[parameters('environmentName')]"
    },
    "resourceGroupName": "",
    "backendServiceName": "",
    "frontendServiceName": "",
    "backendExists": false,
    "frontendExists": false
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[if(not(empty(variables('resourceGroupName'))), variables('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "container-registry",
      "resourceGroup": "[if(not(empty(variables('resourceGroupName'))), variables('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}{1}', variables('abbrs').containerRegistryRegistries, variables('resourceToken_'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "12435722460081876991"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "adminUserEnabled": {
              "type": "bool",
              "defaultValue": true
            },
            "anonymousPullEnabled": {
              "type": "bool",
              "defaultValue": false
            },
            "dataEndpointEnabled": {
              "type": "bool",
              "defaultValue": false
            },
            "encryption": {
              "type": "object",
              "defaultValue": {
                "status": "disabled"
              }
            },
            "networkRuleBypassOptions": {
              "type": "string",
              "defaultValue": "AzureServices"
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Enabled"
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "Basic"
              }
            },
            "zoneRedundancy": {
              "type": "string",
              "defaultValue": "Disabled"
            }
          },
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2023-01-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": "[parameters('sku')]",
              "properties": {
                "adminUserEnabled": "[parameters('adminUserEnabled')]",
                "anonymousPullEnabled": "[parameters('anonymousPullEnabled')]",
                "dataEndpointEnabled": "[parameters('dataEndpointEnabled')]",
                "encryption": "[parameters('encryption')]",
                "networkRuleBypassOptions": "[parameters('networkRuleBypassOptions')]",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "zoneRedundancy": "[parameters('zoneRedundancy')]"
              }
            }
          ],
          "outputs": {
            "loginServer": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2023-01-01-preview').loginServer]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(variables('resourceGroupName'))), variables('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "container-apps-env",
      "resourceGroup": "[if(not(empty(variables('resourceGroupName'))), variables('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}{1}', variables('abbrs').appManagedEnvironments, variables('resourceToken_'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "7797606943296838537"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "defaultValue": ""
            },
            "applicationInsightsName": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/managedEnvironments",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "appLogsConfiguration": {
                  "destination": "log-analytics",
                  "logAnalyticsConfiguration": {
                    "customerId": "[if(empty(parameters('logAnalyticsWorkspaceName')), reference(resourceId('Microsoft.Resources/deployments', 'container-apps-logs'), '2022-09-01').outputs.customerId.value, reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), '2021-12-01-preview').customerId)]",
                    "sharedKey": "[if(empty(parameters('logAnalyticsWorkspaceName')), reference(resourceId('Microsoft.Resources/deployments', 'container-apps-logs'), '2022-09-01').outputs.primarySharedKey.value, listKeys(resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), '2021-12-01-preview').primarySharedKey)]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'container-apps-logs')]"
              ]
            },
            {
              "condition": "[empty(parameters('logAnalyticsWorkspaceName'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "container-apps-logs",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('{0}-logs', parameters('name'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "1585515513660399413"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "PerGB2018"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2021-12-01-preview",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "retentionInDays": 30,
                        "features": {
                          "searchVersion": 1
                        },
                        "sku": {
                          "name": "[parameters('skuName')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "customerId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), '2021-12-01-preview').customerId]"
                    },
                    "primarySharedKey": {
                      "type": "string",
                      "value": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), '2021-12-01-preview').primarySharedKey]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "defaultDomain": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.App/managedEnvironments', parameters('name')), '2023-05-01').defaultDomain]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(variables('resourceGroupName'))), variables('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "backend",
      "resourceGroup": "[if(not(empty(variables('resourceGroupName'))), variables('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(variables('backendServiceName'))), createObject('value', variables('backendServiceName')), createObject('value', format('{0}backend-{1}', variables('abbrs').appContainerApps, variables('resourceToken_'))))]",
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "containerAppsEnvironmentName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(variables('resourceGroupName'))), variables('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'container-apps-env'), '2022-09-01').outputs.name.value]"
          },
          "containerRegistryName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(variables('resourceGroupName'))), variables('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'container-registry'), '2022-09-01').outputs.name.value]"
          },
          "exists": {
            "value": "[variables('backendExists')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "485222489251666403"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "containerAppsEnvironmentName": {
              "type": "string"
            },
            "containerRegistryName": {
              "type": "string"
            },
            "exists": {
              "type": "bool",
              "defaultValue": false
            },
            "containerCpuCoreCount": {
              "type": "string",
              "defaultValue": "0.5"
            },
            "containerMemory": {
              "type": "string",
              "defaultValue": "1.0Gi"
            },
            "containerMinReplicas": {
              "type": "int",
              "defaultValue": 1
            },
            "containerMaxReplicas": {
              "type": "int",
              "defaultValue": 10
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[union(parameters('tags'), createObject('azd-service-name', 'backend'))]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName'))]",
                "configuration": {
                  "ingress": {
                    "external": true,
                    "targetPort": 8000,
                    "transport": "http",
                    "allowInsecure": false
                  },
                  "registries": [
                    {
                      "server": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2023-01-01-preview').loginServer]",
                      "identity": "system"
                    }
                  ]
                },
                "template": {
                  "containers": [
                    {
                      "image": "[if(parameters('exists'), 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest', 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest')]",
                      "name": "backend",
                      "env": [
                        {
                          "name": "PYTHONPATH",
                          "value": "/app"
                        }
                      ],
                      "resources": {
                        "cpu": "[json(parameters('containerCpuCoreCount'))]",
                        "memory": "[parameters('containerMemory')]"
                      },
                      "probes": [
                        {
                          "type": "Readiness",
                          "httpGet": {
                            "path": "/healthz",
                            "port": 8000,
                            "scheme": "HTTP"
                          },
                          "initialDelaySeconds": 10,
                          "periodSeconds": 5,
                          "timeoutSeconds": 3,
                          "successThreshold": 1,
                          "failureThreshold": 3
                        },
                        {
                          "type": "Liveness",
                          "httpGet": {
                            "path": "/healthz",
                            "port": 8000,
                            "scheme": "HTTP"
                          },
                          "initialDelaySeconds": 30,
                          "periodSeconds": 30,
                          "timeoutSeconds": 3,
                          "successThreshold": 1,
                          "failureThreshold": 3
                        }
                      ]
                    }
                  ],
                  "scale": {
                    "minReplicas": "[parameters('containerMinReplicas')]",
                    "maxReplicas": "[parameters('containerMaxReplicas')]"
                  }
                }
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('containerRegistryName'))]",
              "name": "[guid(subscription().id, resourceGroup().id, resourceId('Microsoft.App/containerApps', parameters('name')), 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                "principalId": "[reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01', 'full').identity.principalId]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "defaultDomain": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName')), '2023-05-01').defaultDomain]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "uri": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01').configuration.ingress.fqdn)]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(variables('resourceGroupName'))), variables('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'container-apps-env')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(variables('resourceGroupName'))), variables('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'container-registry')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(variables('resourceGroupName'))), variables('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "frontend",
      "resourceGroup": "[if(not(empty(variables('resourceGroupName'))), variables('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(variables('frontendServiceName'))), createObject('value', variables('frontendServiceName')), createObject('value', format('{0}frontend-{1}', variables('abbrs').appContainerApps, variables('resourceToken_'))))]",
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "containerAppsEnvironmentName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(variables('resourceGroupName'))), variables('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'container-apps-env'), '2022-09-01').outputs.name.value]"
          },
          "containerRegistryName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(variables('resourceGroupName'))), variables('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'container-registry'), '2022-09-01').outputs.name.value]"
          },
          "backendUri": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(variables('resourceGroupName'))), variables('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'backend'), '2022-09-01').outputs.uri.value]"
          },
          "exists": {
            "value": "[variables('frontendExists')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "11732143924306518520"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "containerAppsEnvironmentName": {
              "type": "string"
            },
            "containerRegistryName": {
              "type": "string"
            },
            "backendUri": {
              "type": "string"
            },
            "exists": {
              "type": "bool",
              "defaultValue": false
            },
            "containerCpuCoreCount": {
              "type": "string",
              "defaultValue": "0.5"
            },
            "containerMemory": {
              "type": "string",
              "defaultValue": "1.0Gi"
            },
            "containerMinReplicas": {
              "type": "int",
              "defaultValue": 1
            },
            "containerMaxReplicas": {
              "type": "int",
              "defaultValue": 10
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[union(parameters('tags'), createObject('azd-service-name', 'frontend'))]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName'))]",
                "configuration": {
                  "ingress": {
                    "external": true,
                    "targetPort": 80,
                    "transport": "http",
                    "allowInsecure": false
                  },
                  "registries": [
                    {
                      "server": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2023-01-01-preview').loginServer]",
                      "identity": "system"
                    }
                  ]
                },
                "template": {
                  "containers": [
                    {
                      "image": "[if(parameters('exists'), 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest', 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest')]",
                      "name": "frontend",
                      "env": [
                        {
                          "name": "VITE_API_URL",
                          "value": "[parameters('backendUri')]"
                        }
                      ],
                      "resources": {
                        "cpu": "[json(parameters('containerCpuCoreCount'))]",
                        "memory": "[parameters('containerMemory')]"
                      },
                      "probes": [
                        {
                          "type": "Readiness",
                          "httpGet": {
                            "path": "/",
                            "port": 80,
                            "scheme": "HTTP"
                          },
                          "initialDelaySeconds": 10,
                          "periodSeconds": 5,
                          "timeoutSeconds": 3,
                          "successThreshold": 1,
                          "failureThreshold": 3
                        },
                        {
                          "type": "Liveness",
                          "httpGet": {
                            "path": "/",
                            "port": 80,
                            "scheme": "HTTP"
                          },
                          "initialDelaySeconds": 30,
                          "periodSeconds": 30,
                          "timeoutSeconds": 3,
                          "successThreshold": 1,
                          "failureThreshold": 3
                        }
                      ]
                    }
                  ],
                  "scale": {
                    "minReplicas": "[parameters('containerMinReplicas')]",
                    "maxReplicas": "[parameters('containerMaxReplicas')]"
                  }
                }
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('containerRegistryName'))]",
              "name": "[guid(subscription().id, resourceGroup().id, resourceId('Microsoft.App/containerApps', parameters('name')), 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                "principalId": "[reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01', 'full').identity.principalId]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "defaultDomain": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName')), '2023-05-01').defaultDomain]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "uri": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01').configuration.ingress.fqdn)]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(variables('resourceGroupName'))), variables('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'backend')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(variables('resourceGroupName'))), variables('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'container-apps-env')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(variables('resourceGroupName'))), variables('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'container-registry')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(variables('resourceGroupName'))), variables('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    }
  ],
  "outputs": {
    "AZURE_LOCATION": {
      "type": "string",
      "value": "[parameters('location')]"
    },
    "AZURE_TENANT_ID": {
      "type": "string",
      "value": "[tenant().tenantId]"
    },
    "AZURE_RESOURCE_GROUP": {
      "type": "string",
      "value": "[if(not(empty(variables('resourceGroupName'))), variables('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]"
    },
    "AZURE_CONTAINER_REGISTRY_ENDPOINT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(variables('resourceGroupName'))), variables('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'container-registry'), '2022-09-01').outputs.loginServer.value]"
    },
    "AZURE_CONTAINER_REGISTRY_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(variables('resourceGroupName'))), variables('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'container-registry'), '2022-09-01').outputs.name.value]"
    },
    "BACKEND_URI": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(variables('resourceGroupName'))), variables('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'backend'), '2022-09-01').outputs.uri.value]"
    },
    "FRONTEND_URI": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(variables('resourceGroupName'))), variables('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'frontend'), '2022-09-01').outputs.uri.value]"
    }
  }
}